#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import codecs
import numpy as np
from molecule import *


##########################
## Extraction functions ##
##########################




def extract_cube(file):
    """
    Extracts the global descriptors from an adf output

    Input : file (str)

    Outputs :
    """
    #flag value correspond to the number of line for each part on the file
    flag_header = 2
    flag_atoms = 1
    flag_voxel = 3
    flag_other = 1 #For the line between the atoms and the cube. Only on cube generated by orca ?
    number_points = 1
    list_number_points = []
    voxel_matrix = []

    count_line = 0
    count_square = 0
    line = []
    square = []

    atom_number = []
    atom_position = []
    cube = []

    for file_line in codecs.open(file, 'r',encoding="utf-8"):
        L = file_line.split()
        if flag_header:
            flag_header -= 1

        elif flag_atoms:
            number_atoms = abs(int(L[0]))
            voxel_origin = [float(L[1]),float(L[2]),float(L[3])]
            flag_pos = number_atoms
            flag_atoms -= 1

        elif flag_voxel:
            number_points *= int(L[0])
            list_number_points.append(int(L[0]))
            voxel_matrix.append([float(L[1]),float(L[2]),float(L[3])])
            flag_voxel -=1

        elif flag_pos:
            atom_number.append(int(L[0]))
            atom_position.append([float(L[2]),float(L[3]),float(L[4])])
            flag_pos -= 1

        elif flag_other:
            number_lines_x = list_number_points[0]//6+ ((list_number_points[0]%6)>1)
            number_squares_y = list_number_points[1]

            flag_other -= 1

        else:
            for l in L:
                line.append(float(l))
            count_line +=1

            if count_line == number_lines_x:
                square.append(line)
                line = []
                count_line = 0
                count_square += 1

                if count_square == number_squares_y:
                    cube.append(square)
                    square = []
                    count_square = 0
    return voxel_origin,voxel_matrix,atom_number,atom_position,np.array(cube)


def extract(file):
    """
    Extracts the global descriptors from an adf output

    Input : file (str)

    Outputs :
    """

    voxel_origin,voxel_matrix,atom_number,atom_position,cube = extract_cube(file)


    list_atoms = []
    for prop in zip(atom_number,atom_position):
        atom_x = atom(prop[0],prop[1])
        list_atoms.append(atom_x)

    mol = molecule(list_atoms,[],properties={"voxel_origin":voxel_origin,"voxel_matrix":voxel_matrix,"cube":cube})

    return mol
